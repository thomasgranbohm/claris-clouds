version: '3.8'
services:
  backend:
    build:
      context: backend/
      dockerfile: Dockerfile.prod
    depends_on: 
      database:
        condition: service_healthy
    env_file: backend/.env
    environment: 
      NODE_ENV: production
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    expose:
      - 1337
    volumes:
      - ./backend/.env:/opt/app/.env
      - ./backend/public/uploads:/opt/app/public/uploads
  database:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      timeout: 60s
      retries: 5
      start_period: 5s
    volumes:
      - ./database:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
  frontend:
    build:
      context: frontend/
      dockerfile: Dockerfile.prod
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=production
      - TARGET=staging
    expose:
      - 3000
  nginx:
    command: nginx -g "daemon off;"
    depends_on:
      - frontend
    image: nginx
    ports:
      - ${NGINX_PORT:-9000}:80
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
